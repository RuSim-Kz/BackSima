<?php
/**
 * –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
 */

echo "<h1>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏</h1>\n";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ PHP –≤–µ—Ä—Å–∏–∏
echo "<h2>–ü—Ä–æ–≤–µ—Ä–∫–∞ PHP</h2>\n";
echo "–í–µ—Ä—Å–∏—è PHP: " . PHP_VERSION . "\n";
if (version_compare(PHP_VERSION, '7.4.0', '>=')) {
    echo "‚úÖ PHP –≤–µ—Ä—Å–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç\n";
} else {
    echo "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è PHP 7.4 –∏–ª–∏ –≤—ã—à–µ\n";
    exit(1);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π PHP
echo "<h2>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π PHP</h2>\n";
$required_extensions = ['pdo', 'pdo_pgsql', 'redis', 'curl', 'json'];
foreach ($required_extensions as $ext) {
    if (extension_loaded($ext)) {
        echo "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ $ext —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n";
    } else {
        echo "‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ $ext –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n";
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
echo "<h2>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL</h2>\n";
require_once 'config.php';

try {
    $pdo = getDbConnection();
    if ($pdo) {
        echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ\n";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        $tables = ['categories', 'products', 'orders', 'statistics'];
        foreach ($tables as $table) {
            $stmt = $pdo->query("SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = '$table')");
            $exists = $stmt->fetchColumn();
            if ($exists) {
                echo "‚úÖ –¢–∞–±–ª–∏—Ü–∞ $table —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n";
            } else {
                echo "‚ùå –¢–∞–±–ª–∏—Ü–∞ $table –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n";
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        echo "<h3>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü</h3>\n";
        $sql = file_get_contents('database.sql');
        $pdo->exec($sql);
        echo "‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã\n";
        
    } else {
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL\n";
        echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ config.php\n";
    }
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: " . $e->getMessage() . "\n";
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
echo "<h2>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis</h2>\n";
try {
    $redis = getRedisConnection();
    if ($redis) {
        echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ\n";
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –∏ —á—Ç–µ–Ω–∏–µ
        $testKey = 'setup_test_' . time();
        $testValue = 'test_value';
        $redis->set($testKey, $testValue);
        $readValue = $redis->get($testKey);
        $redis->del($testKey);
        
        if ($readValue === $testValue) {
            echo "‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
        } else {
            echo "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —á—Ç–µ–Ω–∏–µ–º/–∑–∞–ø–∏—Å—å—é –≤ Redis\n";
        }
    } else {
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis\n";
        echo "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:6379\n";
    }
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: " . $e->getMessage() . "\n";
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
echo "<h2>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤</h2>\n";

// –¢–µ—Å—Ç Alpha —Å–∫—Ä–∏–ø—Ç–∞
echo "<h3>–¢–µ—Å—Ç Alpha —Å–∫—Ä–∏–ø—Ç–∞</h3>\n";
try {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, 'http://' . $_SERVER['HTTP_HOST'] . dirname($_SERVER['REQUEST_URI']) . '/alpha.php');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);
    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    if ($httpCode === 200) {
        $data = json_decode($response, true);
        if ($data && isset($data['status'])) {
            echo "‚úÖ Alpha —Å–∫—Ä–∏–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: " . $data['status'] . "\n";
        } else {
            echo "‚ùå Alpha —Å–∫—Ä–∏–ø—Ç –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö\n";
        }
    } else {
        echo "‚ùå Alpha —Å–∫—Ä–∏–ø—Ç –≤–µ—Ä–Ω—É–ª HTTP –∫–æ–¥: $httpCode\n";
    }
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Alpha —Å–∫—Ä–∏–ø—Ç–∞: " . $e->getMessage() . "\n";
}

// –¢–µ—Å—Ç Gamma —Å–∫—Ä–∏–ø—Ç–∞
echo "<h3>–¢–µ—Å—Ç Gamma —Å–∫—Ä–∏–ø—Ç–∞</h3>\n";
try {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, 'http://' . $_SERVER['HTTP_HOST'] . dirname($_SERVER['REQUEST_URI']) . '/gamma.php');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);
    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    if ($httpCode === 200) {
        $data = json_decode($response, true);
        if ($data && isset($data['status'])) {
            echo "‚úÖ Gamma —Å–∫—Ä–∏–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: " . $data['status'] . "\n";
            if (isset($data['data']['total_orders_analyzed'])) {
                echo "üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: " . $data['data']['total_orders_analyzed'] . "\n";
            }
        } else {
            echo "‚ùå Gamma —Å–∫—Ä–∏–ø—Ç –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö\n";
        }
    } else {
        echo "‚ùå Gamma —Å–∫—Ä–∏–ø—Ç –≤–µ—Ä–Ω—É–ª HTTP –∫–æ–¥: $httpCode\n";
    }
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Gamma —Å–∫—Ä–∏–ø—Ç–∞: " . $e->getMessage() . "\n";
}

echo "<h2>üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h2>\n";
echo "<p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å <a href='index.html'>index.html</a> –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.</p>\n";

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
echo "<h2>üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>\n";
echo "<ul>\n";
echo "<li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞</li>\n";
echo "<li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞</li>\n";
echo "<li>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</li>\n";
echo "<li>–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º</li>\n";
echo "</ul>\n";
?>
