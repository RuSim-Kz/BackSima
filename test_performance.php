<?php
/**
 * –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
 */

require_once 'config.php';

header('Content-Type: text/html; charset=utf-8');

echo "<h1>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã</h1>\n";

// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Alpha —Å–∫—Ä–∏–ø—Ç–∞
echo "<h2>–¢–µ—Å—Ç Alpha —Å–∫—Ä–∏–ø—Ç–∞ (10 –∏—Ç–µ—Ä–∞—Ü–∏–π)</h2>\n";
$alphaTimes = [];
$alphaSuccess = 0;

for ($i = 0; $i < 10; $i++) {
    $start = microtime(true);
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, 'http://' . $_SERVER['HTTP_HOST'] . dirname($_SERVER['REQUEST_URI']) . '/alpha.php');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 30);
    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    $end = microtime(true);
    $time = round(($end - $start) * 1000, 2);
    $alphaTimes[] = $time;
    
    if ($httpCode === 200) {
        $data = json_decode($response, true);
        if ($data && $data['status'] === 'success') {
            $alphaSuccess++;
        }
    }
    
    echo "–ò—Ç–µ—Ä–∞—Ü–∏—è " . ($i + 1) . ": {$time}ms\n";
}

$avgAlphaTime = array_sum($alphaTimes) / count($alphaTimes);
echo "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è Alpha: " . round($avgAlphaTime, 2) . "ms\n";
echo "–£—Å–ø–µ—à–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: $alphaSuccess/10\n";

// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Gamma —Å–∫—Ä–∏–ø—Ç–∞
echo "<h2>–¢–µ—Å—Ç Gamma —Å–∫—Ä–∏–ø—Ç–∞ (5 –∏—Ç–µ—Ä–∞—Ü–∏–π)</h2>\n";
$gammaTimes = [];

for ($i = 0; $i < 5; $i++) {
    $start = microtime(true);
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, 'http://' . $_SERVER['HTTP_HOST'] . dirname($_SERVER['REQUEST_URI']) . '/gamma.php');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 30);
    $response = curl_exec($ch);
    curl_close($ch);
    
    $end = microtime(true);
    $time = round(($end - $start) * 1000, 2);
    $gammaTimes[] = $time;
    
    echo "–ò—Ç–µ—Ä–∞—Ü–∏—è " . ($i + 1) . ": {$time}ms\n";
}

$avgGammaTime = array_sum($gammaTimes) / count($gammaTimes);
echo "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è Gamma: " . round($avgGammaTime, 2) . "ms\n";

// –¢–µ—Å—Ç Beta —Å–∫—Ä–∏–ø—Ç–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏—Ç–µ—Ä–∞—Ü–∏–π
echo "<h2>–¢–µ—Å—Ç Beta —Å–∫—Ä–∏–ø—Ç–∞ (50 –∏—Ç–µ—Ä–∞—Ü–∏–π)</h2>\n";
$start = microtime(true);

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, 'http://' . $_SERVER['HTTP_HOST'] . dirname($_SERVER['REQUEST_URI']) . '/beta.php?n=50');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 60);
$response = curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

$end = microtime(true);
$betaTime = round($end - $start, 2);

if ($httpCode === 200) {
    $data = json_decode($response, true);
    if ($data && $data['status'] === 'completed') {
        echo "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Beta (50 –∏—Ç–µ—Ä–∞—Ü–∏–π): {$betaTime}—Å\n";
        echo "–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: " . $data['success_count'] . "\n";
        echo "–û—à–∏–±–æ–∫: " . $data['error_count'] . "\n";
        echo "–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: " . $data['requests_per_second'] . "\n";
    }
}

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
echo "<h2>–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</h2>\n";
$pdo = getDbConnection();
if ($pdo) {
    $start = microtime(true);
    
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    $stmt = $pdo->query("SELECT COUNT(*) FROM orders");
    $count = $stmt->fetchColumn();
    
    $end = microtime(true);
    $dbTime = round(($end - $start) * 1000, 2);
    
    echo "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {$dbTime}ms\n";
    echo "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –ë–î: $count\n";
}

// –¢–µ—Å—Ç Redis
echo "<h2>–¢–µ—Å—Ç Redis</h2>\n";
$redis = getRedisConnection();
if ($redis) {
    $start = microtime(true);
    
    // –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
    $redis->set('test_key', 'test_value');
    $value = $redis->get('test_key');
    $redis->del('test_key');
    
    $end = microtime(true);
    $redisTime = round(($end - $start) * 1000, 2);
    
    echo "–í—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ Redis: {$redisTime}ms\n";
    echo "Redis —Ä–∞–±–æ—Ç–∞–µ—Ç: " . ($value === 'test_value' ? '–î–∞' : '–ù–µ—Ç') . "\n";
}

echo "<h2>üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>\n";
echo "<table border='1' style='border-collapse: collapse; width: 100%;'>\n";
echo "<tr><th>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç</th><th>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</th><th>–°—Ç–∞—Ç—É—Å</th></tr>\n";
echo "<tr><td>Alpha —Å–∫—Ä–∏–ø—Ç</td><td>" . round($avgAlphaTime, 2) . "ms</td><td>" . ($alphaSuccess >= 8 ? '‚úÖ –•–æ—Ä–æ—à–æ' : '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è') . "</td></tr>\n";
echo "<tr><td>Gamma —Å–∫—Ä–∏–ø—Ç</td><td>" . round($avgGammaTime, 2) . "ms</td><td>" . ($avgGammaTime < 100 ? '‚úÖ –û—Ç–ª–∏—á–Ω–æ' : '‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–æ') . "</td></tr>\n";
echo "<tr><td>Beta —Å–∫—Ä–∏–ø—Ç (50 –∏—Ç–µ—Ä–∞—Ü–∏–π)</td><td>{$betaTime}—Å</td><td>" . ($betaTime < 10 ? '‚úÖ –ë—ã—Å—Ç—Ä–æ' : '‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–æ') . "</td></tr>\n";
echo "<tr><td>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</td><td>{$dbTime}ms</td><td>" . ($dbTime < 50 ? '‚úÖ –ë—ã—Å—Ç—Ä–æ' : '‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–æ') . "</td></tr>\n";
echo "<tr><td>Redis</td><td>{$redisTime}ms</td><td>" . ($redisTime < 10 ? '‚úÖ –ë—ã—Å—Ç—Ä–æ' : '‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–æ') . "</td></tr>\n";
echo "</table>\n";

echo "<h2>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</h2>\n";
if ($avgAlphaTime > 1000) {
    echo "<p>‚ö†Ô∏è Alpha —Å–∫—Ä–∏–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</p>\n";
    echo "<ul><li>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</li><li>–£–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–∞–º—è—Ç–∏ PHP</li></ul>\n";
}

if ($avgGammaTime > 100) {
    echo "<p>‚ö†Ô∏è Gamma —Å–∫—Ä–∏–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</p>\n";
    echo "<ul><li>–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</li><li>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å SQL –∑–∞–ø—Ä–æ—Å—ã</li></ul>\n";
}

if ($dbTime > 50) {
    echo "<p>‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</p>\n";
    echo "<ul><li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã</li><li>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL</li></ul>\n";
}

echo "<p><a href='index.html'>‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</a></p>\n";
?>
